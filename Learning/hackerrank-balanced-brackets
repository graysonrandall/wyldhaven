//Hackerrank, balanced brackets

function braces(values) {
    var i;
    var result = [];
    var len = values.length;

    for (i = 0; i < len; i++) {
        if (isBalanced(values[i])) {
            result.push('YES');
        } else {
            result.push('NO');
        }
    }
    return result;
}

// Complete the isBalanced function below.
function isBalanced(s) {
    var i, ch;

    var bracketsMap = new Map();
    bracketsMap.set(']', '[');
    bracketsMap.set('}', '{');
    bracketsMap.set(')', '(');

    // Use the spread operator to transform a map into a 2D key-value Array.
    var closingBrackets = [...bracketsMap.keys()];
    var openingBrackets = [...bracketsMap.values()];

    var temp = [];
    var len = s.length;

    for (i = 0; i < len; i++) {
        ch = s[i];

        if (openingBrackets.indexOf(ch) > -1) {
            temp.push(ch);
        } else if (closingBrackets.indexOf(ch) > -1) {

            var expectedBracket = bracketsMap.get(ch);
            if (temp.length === 0 || (temp.pop() !== expectedBracket)) {
                return false;
            }

        } else {
            // Ignore the characters which do not match valid Brackets symbol
            continue;
        }
    }

    return (temp.length === 0);
}

var i1 = [
    "{[()]}",
    "{[(])}",
    "{{[[(())]]}}"
];

var i2 = [
    "{{([])}}",
    "{{)[](}}"
];

var i3 = [
    "{(([])[])[]}",
    "{(([])[])[]]}",
    "{(([])[])[]}[]"
];

braces(i1);
braces(i2);
braces(i3);
